        -:    0:Source:/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__locale
        -:    0:Graph:tmp2.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:// -*- C++ -*-
        -:    2://===----------------------------------------------------------------------===//
        -:    3://
        -:    4:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    5:// See https://llvm.org/LICENSE.txt for license information.
        -:    6:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    7://
        -:    8://===----------------------------------------------------------------------===//
        -:    9:
        -:   10:#ifndef _LIBCPP___LOCALE
        -:   11:#define _LIBCPP___LOCALE
        -:   12:
        -:   13:#include <__availability>
        -:   14:#include <__config>
        -:   15:#include <string>
        -:   16:#include <memory>
        -:   17:#include <utility>
        -:   18:#include <mutex>
        -:   19:#include <cstdint>
        -:   20:#include <cctype>
        -:   21:#include <locale.h>
        -:   22:#if defined(_LIBCPP_MSVCRT_LIKE)
        -:   23:# include <cstring>
        -:   24:# include <__support/win32/locale_win32.h>
        -:   25:#elif defined(__NuttX__)
        -:   26:# include <__support/nuttx/xlocale.h>
        -:   27:#elif defined(_AIX) || defined(__MVS__)
        -:   28:# include <__support/ibm/xlocale.h>
        -:   29:#elif defined(__ANDROID__)
        -:   30:# include <__support/android/locale_bionic.h>
        -:   31:#elif defined(__sun__)
        -:   32:# include <xlocale.h>
        -:   33:# include <__support/solaris/xlocale.h>
        -:   34:#elif defined(_NEWLIB_VERSION)
        -:   35:# include <__support/newlib/xlocale.h>
        -:   36:#elif defined(__OpenBSD__)
        -:   37:# include <__support/openbsd/xlocale.h>
        -:   38:#elif (defined(__APPLE__)      || defined(__FreeBSD__) \
        -:   39:    || defined(__EMSCRIPTEN__) || defined(__IBMCPP__))
        -:   40:# include <xlocale.h>
        -:   41:#elif defined(__Fuchsia__)
        -:   42:# include <__support/fuchsia/xlocale.h>
        -:   43:#elif defined(__wasi__)
        -:   44:// WASI libc uses musl's locales support.
        -:   45:# include <__support/musl/xlocale.h>
        -:   46:#elif defined(_LIBCPP_HAS_MUSL_LIBC)
        -:   47:# include <__support/musl/xlocale.h>
        -:   48:#endif
        -:   49:
        -:   50:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:   51:#pragma GCC system_header
        -:   52:#endif
        -:   53:
        -:   54:_LIBCPP_BEGIN_NAMESPACE_STD
        -:   55:
        -:   56:#if !defined(_LIBCPP_LOCALE__L_EXTENSIONS)
        -:   57:struct __libcpp_locale_guard {
        -:   58:  _LIBCPP_INLINE_VISIBILITY
        -:   59:  __libcpp_locale_guard(locale_t& __loc) : __old_loc_(uselocale(__loc)) {}
        -:   60:
        -:   61:  _LIBCPP_INLINE_VISIBILITY
        -:   62:  ~__libcpp_locale_guard() {
        -:   63:    if (__old_loc_)
        -:   64:      uselocale(__old_loc_);
        -:   65:  }
        -:   66:
        -:   67:  locale_t __old_loc_;
        -:   68:private:
        -:   69:  __libcpp_locale_guard(__libcpp_locale_guard const&);
        -:   70:  __libcpp_locale_guard& operator=(__libcpp_locale_guard const&);
        -:   71:};
        -:   72:#elif defined(_LIBCPP_MSVCRT_LIKE)
        -:   73:struct __libcpp_locale_guard {
        -:   74:    __libcpp_locale_guard(locale_t __l) :
        -:   75:        __status(_configthreadlocale(_ENABLE_PER_THREAD_LOCALE)) {
        -:   76:      // Setting the locale can be expensive even when the locale given is
        -:   77:      // already the current locale, so do an explicit check to see if the
        -:   78:      // current locale is already the one we want.
        -:   79:      const char* __lc = __setlocale(nullptr);
        -:   80:      // If every category is the same, the locale string will simply be the
        -:   81:      // locale name, otherwise it will be a semicolon-separated string listing
        -:   82:      // each category.  In the second case, we know at least one category won't
        -:   83:      // be what we want, so we only have to check the first case.
        -:   84:      if (_VSTD::strcmp(__l.__get_locale(), __lc) != 0) {
        -:   85:        __locale_all = _strdup(__lc);
        -:   86:        if (__locale_all == nullptr)
        -:   87:          __throw_bad_alloc();
        -:   88:        __setlocale(__l.__get_locale());
        -:   89:      }
        -:   90:    }
        -:   91:    ~__libcpp_locale_guard() {
        -:   92:      // The CRT documentation doesn't explicitly say, but setlocale() does the
        -:   93:      // right thing when given a semicolon-separated list of locale settings
        -:   94:      // for the different categories in the same format as returned by
        -:   95:      // setlocale(LC_ALL, nullptr).
        -:   96:      if (__locale_all != nullptr) {
        -:   97:        __setlocale(__locale_all);
        -:   98:        free(__locale_all);
        -:   99:      }
        -:  100:      _configthreadlocale(__status);
        -:  101:    }
        -:  102:    static const char* __setlocale(const char* __locale) {
        -:  103:      const char* __new_locale = setlocale(LC_ALL, __locale);
        -:  104:      if (__new_locale == nullptr)
        -:  105:        __throw_bad_alloc();
        -:  106:      return __new_locale;
        -:  107:    }
        -:  108:    int __status;
        -:  109:    char* __locale_all = nullptr;
        -:  110:};
        -:  111:#endif
        -:  112:
        -:  113:class _LIBCPP_TYPE_VIS locale;
        -:  114:
        -:  115:template <class _Facet>
        -:  116:_LIBCPP_INLINE_VISIBILITY
        -:  117:bool
        -:  118:has_facet(const locale&) _NOEXCEPT;
        -:  119:
        -:  120:template <class _Facet>
        -:  121:_LIBCPP_INLINE_VISIBILITY
        -:  122:const _Facet&
        -:  123:use_facet(const locale&);
        -:  124:
        -:  125:class _LIBCPP_TYPE_VIS locale
        -:  126:{
        -:  127:public:
        -:  128:    // types:
        -:  129:    class _LIBCPP_TYPE_VIS facet;
        -:  130:    class _LIBCPP_TYPE_VIS id;
        -:  131:
        -:  132:    typedef int category;
        -:  133:    _LIBCPP_AVAILABILITY_LOCALE_CATEGORY
        -:  134:    static const category // values assigned here are for exposition only
        -:  135:        none     = 0,
        -:  136:        collate  = LC_COLLATE_MASK,
        -:  137:        ctype    = LC_CTYPE_MASK,
        -:  138:        monetary = LC_MONETARY_MASK,
        -:  139:        numeric  = LC_NUMERIC_MASK,
        -:  140:        time     = LC_TIME_MASK,
        -:  141:        messages = LC_MESSAGES_MASK,
        -:  142:        all = collate | ctype | monetary | numeric | time | messages;
        -:  143:
        -:  144:    // construct/copy/destroy:
        -:  145:    locale()  _NOEXCEPT;
        -:  146:    locale(const locale&)  _NOEXCEPT;
        -:  147:    explicit locale(const char*);
        -:  148:    explicit locale(const string&);
        -:  149:    locale(const locale&, const char*, category);
        -:  150:    locale(const locale&, const string&, category);
        -:  151:    template <class _Facet>
        -:  152:        _LIBCPP_INLINE_VISIBILITY locale(const locale&, _Facet*);
        -:  153:    locale(const locale&, const locale&, category);
        -:  154:
        -:  155:    ~locale();
        -:  156:
        -:  157:    const locale& operator=(const locale&)  _NOEXCEPT;
        -:  158:
        -:  159:    template <class _Facet>
        -:  160:      _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -:  161:      locale combine(const locale&) const;
        -:  162:
        -:  163:    // locale operations:
        -:  164:    string name() const;
        -:  165:    bool operator==(const locale&) const;
        -:  166:    bool operator!=(const locale& __y) const {return !(*this == __y);}
        -:  167:    template <class _CharT, class _Traits, class _Allocator>
        -:  168:      _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -:  169:      bool operator()(const basic_string<_CharT, _Traits, _Allocator>&,
        -:  170:                      const basic_string<_CharT, _Traits, _Allocator>&) const;
        -:  171:
        -:  172:    // global locale objects:
        -:  173:    static locale global(const locale&);
        -:  174:    static const locale& classic();
        -:  175:
        -:  176:private:
        -:  177:    class __imp;
        -:  178:    __imp* __locale_;
        -:  179:
        -:  180:    void __install_ctor(const locale&, facet*, long);
        -:  181:    static locale& __global();
        -:  182:    bool has_facet(id&) const;
        -:  183:    const facet* use_facet(id&) const;
        -:  184:
        -:  185:    template <class _Facet> friend bool has_facet(const locale&)  _NOEXCEPT;
        -:  186:    template <class _Facet> friend const _Facet& use_facet(const locale&);
        -:  187:};
        -:  188:
        -:  189:class _LIBCPP_TYPE_VIS locale::facet
        -:  190:    : public __shared_count
        -:  191:{
        -:  192:protected:
        -:  193:    _LIBCPP_INLINE_VISIBILITY
        -:  194:    explicit facet(size_t __refs = 0)
        -:  195:        : __shared_count(static_cast<long>(__refs)-1) {}
        -:  196:
        -:  197:    virtual ~facet();
        -:  198:
        -:  199://    facet(const facet&) = delete;     // effectively done in __shared_count
        -:  200://    void operator=(const facet&) = delete;
        -:  201:private:
        -:  202:    virtual void __on_zero_shared() _NOEXCEPT;
        -:  203:};
        -:  204:
        -:  205:class _LIBCPP_TYPE_VIS locale::id
        -:  206:{
        -:  207:    once_flag      __flag_;
        -:  208:    int32_t        __id_;
        -:  209:
        -:  210:    static int32_t __next_id;
        -:  211:public:
        -:  212:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR id() :__id_(0) {}
        -:  213:private:
        -:  214:    void __init();
        -:  215:    void operator=(const id&); // = delete;
        -:  216:    id(const id&); // = delete;
        -:  217:public:  // only needed for tests
        -:  218:    long __get();
        -:  219:
        -:  220:    friend class locale;
        -:  221:    friend class locale::__imp;
        -:  222:};
        -:  223:
        -:  224:template <class _Facet>
        -:  225:inline _LIBCPP_INLINE_VISIBILITY
        -:  226:locale::locale(const locale& __other, _Facet* __f)
        -:  227:{
        -:  228:    __install_ctor(__other, __f, __f ? __f->id.__get() : 0);
        -:  229:}
        -:  230:
        -:  231:template <class _Facet>
        -:  232:locale
        -:  233:locale::combine(const locale& __other) const
        -:  234:{
        -:  235:    if (!_VSTD::has_facet<_Facet>(__other))
        -:  236:        __throw_runtime_error("locale::combine: locale missing facet");
        -:  237:
        -:  238:    return locale(*this, &const_cast<_Facet&>(_VSTD::use_facet<_Facet>(__other)));
        -:  239:}
        -:  240:
        -:  241:template <class _Facet>
        -:  242:inline _LIBCPP_INLINE_VISIBILITY
        -:  243:bool
        -:  244:has_facet(const locale& __l)  _NOEXCEPT
        -:  245:{
        -:  246:    return __l.has_facet(_Facet::id);
        -:  247:}
        -:  248:
        -:  249:template <class _Facet>
        -:  250:inline _LIBCPP_INLINE_VISIBILITY
        -:  251:const _Facet&
    #####:  252:use_facet(const locale& __l)
        -:  253:{
    #####:  254:    return static_cast<const _Facet&>(*__l.use_facet(_Facet::id));
        -:  255:}
        -:  256:
        -:  257:// template <class _CharT> class collate;
        -:  258:
        -:  259:template <class _CharT>
        -:  260:class _LIBCPP_TEMPLATE_VIS collate
        -:  261:    : public locale::facet
        -:  262:{
        -:  263:public:
        -:  264:    typedef _CharT char_type;
        -:  265:    typedef basic_string<char_type> string_type;
        -:  266:
        -:  267:    _LIBCPP_INLINE_VISIBILITY
        -:  268:    explicit collate(size_t __refs = 0)
        -:  269:        : locale::facet(__refs) {}
        -:  270:
        -:  271:    _LIBCPP_INLINE_VISIBILITY
        -:  272:    int compare(const char_type* __lo1, const char_type* __hi1,
        -:  273:                const char_type* __lo2, const char_type* __hi2) const
        -:  274:    {
        -:  275:        return do_compare(__lo1, __hi1, __lo2, __hi2);
        -:  276:    }
        -:  277:
        -:  278:    // FIXME(EricWF): The _LIBCPP_ALWAYS_INLINE is needed on Windows to work
        -:  279:    // around a dllimport bug that expects an external instantiation.
        -:  280:    _LIBCPP_INLINE_VISIBILITY
        -:  281:    _LIBCPP_ALWAYS_INLINE
        -:  282:    string_type transform(const char_type* __lo, const char_type* __hi) const
        -:  283:    {
        -:  284:        return do_transform(__lo, __hi);
        -:  285:    }
        -:  286:
        -:  287:    _LIBCPP_INLINE_VISIBILITY
        -:  288:    long hash(const char_type* __lo, const char_type* __hi) const
        -:  289:    {
        -:  290:        return do_hash(__lo, __hi);
        -:  291:    }
        -:  292:
        -:  293:    static locale::id id;
        -:  294:
        -:  295:protected:
        -:  296:    ~collate();
        -:  297:    virtual int do_compare(const char_type* __lo1, const char_type* __hi1,
        -:  298:                           const char_type* __lo2, const char_type* __hi2) const;
        -:  299:    virtual string_type do_transform(const char_type* __lo, const char_type* __hi) const
        -:  300:        {return string_type(__lo, __hi);}
        -:  301:    virtual long do_hash(const char_type* __lo, const char_type* __hi) const;
        -:  302:};
        -:  303:
        -:  304:template <class _CharT> locale::id collate<_CharT>::id;
        -:  305:
        -:  306:template <class _CharT>
        -:  307:collate<_CharT>::~collate()
        -:  308:{
        -:  309:}
        -:  310:
        -:  311:template <class _CharT>
        -:  312:int
        -:  313:collate<_CharT>::do_compare(const char_type* __lo1, const char_type* __hi1,
        -:  314:                            const char_type* __lo2, const char_type* __hi2) const
        -:  315:{
        -:  316:    for (; __lo2 != __hi2; ++__lo1, ++__lo2)
        -:  317:    {
        -:  318:        if (__lo1 == __hi1 || *__lo1 < *__lo2)
        -:  319:            return -1;
        -:  320:        if (*__lo2 < *__lo1)
        -:  321:            return 1;
        -:  322:    }
        -:  323:    return __lo1 != __hi1;
        -:  324:}
        -:  325:
        -:  326:template <class _CharT>
        -:  327:long
        -:  328:collate<_CharT>::do_hash(const char_type* __lo, const char_type* __hi) const
        -:  329:{
        -:  330:    size_t __h = 0;
        -:  331:    const size_t __sr = __CHAR_BIT__ * sizeof(size_t) - 8;
        -:  332:    const size_t __mask = size_t(0xF) << (__sr + 4);
        -:  333:    for(const char_type* __p = __lo; __p != __hi; ++__p)
        -:  334:    {
        -:  335:        __h = (__h << 4) + static_cast<size_t>(*__p);
        -:  336:        size_t __g = __h & __mask;
        -:  337:        __h ^= __g | (__g >> __sr);
        -:  338:    }
        -:  339:    return static_cast<long>(__h);
        -:  340:}
        -:  341:
        -:  342:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS collate<char>)
        -:  343:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -:  344:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS collate<wchar_t>)
        -:  345:#endif
        -:  346:
        -:  347:// template <class CharT> class collate_byname;
        -:  348:
        -:  349:template <class _CharT> class _LIBCPP_TEMPLATE_VIS collate_byname;
        -:  350:
        -:  351:template <>
        -:  352:class _LIBCPP_TYPE_VIS collate_byname<char>
        -:  353:    : public collate<char>
        -:  354:{
        -:  355:    locale_t __l;
        -:  356:public:
        -:  357:    typedef char char_type;
        -:  358:    typedef basic_string<char_type> string_type;
        -:  359:
        -:  360:    explicit collate_byname(const char* __n, size_t __refs = 0);
        -:  361:    explicit collate_byname(const string& __n, size_t __refs = 0);
        -:  362:
        -:  363:protected:
        -:  364:    ~collate_byname();
        -:  365:    virtual int do_compare(const char_type* __lo1, const char_type* __hi1,
        -:  366:                           const char_type* __lo2, const char_type* __hi2) const;
        -:  367:    virtual string_type do_transform(const char_type* __lo, const char_type* __hi) const;
        -:  368:};
        -:  369:
        -:  370:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -:  371:template <>
        -:  372:class _LIBCPP_TYPE_VIS collate_byname<wchar_t>
        -:  373:    : public collate<wchar_t>
        -:  374:{
        -:  375:    locale_t __l;
        -:  376:public:
        -:  377:    typedef wchar_t char_type;
        -:  378:    typedef basic_string<char_type> string_type;
        -:  379:
        -:  380:    explicit collate_byname(const char* __n, size_t __refs = 0);
        -:  381:    explicit collate_byname(const string& __n, size_t __refs = 0);
        -:  382:
        -:  383:protected:
        -:  384:    ~collate_byname();
        -:  385:
        -:  386:    virtual int do_compare(const char_type* __lo1, const char_type* __hi1,
        -:  387:                           const char_type* __lo2, const char_type* __hi2) const;
        -:  388:    virtual string_type do_transform(const char_type* __lo, const char_type* __hi) const;
        -:  389:};
        -:  390:#endif
        -:  391:
        -:  392:template <class _CharT, class _Traits, class _Allocator>
        -:  393:bool
        -:  394:locale::operator()(const basic_string<_CharT, _Traits, _Allocator>& __x,
        -:  395:                   const basic_string<_CharT, _Traits, _Allocator>& __y) const
        -:  396:{
        -:  397:    return _VSTD::use_facet<_VSTD::collate<_CharT> >(*this).compare(
        -:  398:                                       __x.data(), __x.data() + __x.size(),
        -:  399:                                       __y.data(), __y.data() + __y.size()) < 0;
        -:  400:}
        -:  401:
        -:  402:// template <class charT> class ctype
        -:  403:
        -:  404:class _LIBCPP_TYPE_VIS ctype_base
        -:  405:{
        -:  406:public:
        -:  407:#if defined(_LIBCPP_PROVIDES_DEFAULT_RUNE_TABLE)
        -:  408:    typedef unsigned long mask;
        -:  409:    static const mask space  = 1<<0;
        -:  410:    static const mask print  = 1<<1;
        -:  411:    static const mask cntrl  = 1<<2;
        -:  412:    static const mask upper  = 1<<3;
        -:  413:    static const mask lower  = 1<<4;
        -:  414:    static const mask alpha  = 1<<5;
        -:  415:    static const mask digit  = 1<<6;
        -:  416:    static const mask punct  = 1<<7;
        -:  417:    static const mask xdigit = 1<<8;
        -:  418:    static const mask blank  = 1<<9;
        -:  419:#if defined(__BIONIC__)
        -:  420:    // Historically this was a part of regex_traits rather than ctype_base. The
        -:  421:    // historical value of the constant is preserved for ABI compatibility.
        -:  422:    static const mask __regex_word = 0x8000;
        -:  423:#else
        -:  424:    static const mask __regex_word = 1<<10;
        -:  425:#endif // defined(__BIONIC__)
        -:  426:#elif defined(__GLIBC__)
        -:  427:    typedef unsigned short mask;
        -:  428:    static const mask space  = _ISspace;
        -:  429:    static const mask print  = _ISprint;
        -:  430:    static const mask cntrl  = _IScntrl;
        -:  431:    static const mask upper  = _ISupper;
        -:  432:    static const mask lower  = _ISlower;
        -:  433:    static const mask alpha  = _ISalpha;
        -:  434:    static const mask digit  = _ISdigit;
        -:  435:    static const mask punct  = _ISpunct;
        -:  436:    static const mask xdigit = _ISxdigit;
        -:  437:    static const mask blank  = _ISblank;
        -:  438:#if defined(__mips__)
        -:  439:    static const mask __regex_word = static_cast<mask>(_ISbit(15));
        -:  440:#else
        -:  441:    static const mask __regex_word = 0x80;
        -:  442:#endif
        -:  443:#elif defined(_LIBCPP_MSVCRT_LIKE)
        -:  444:    typedef unsigned short mask;
        -:  445:    static const mask space  = _SPACE;
        -:  446:    static const mask print  = _BLANK|_PUNCT|_ALPHA|_DIGIT;
        -:  447:    static const mask cntrl  = _CONTROL;
        -:  448:    static const mask upper  = _UPPER;
        -:  449:    static const mask lower  = _LOWER;
        -:  450:    static const mask alpha  = _ALPHA;
        -:  451:    static const mask digit  = _DIGIT;
        -:  452:    static const mask punct  = _PUNCT;
        -:  453:    static const mask xdigit = _HEX;
        -:  454:    static const mask blank  = _BLANK;
        -:  455:    static const mask __regex_word = 0x80;
        -:  456:# define _LIBCPP_CTYPE_MASK_IS_COMPOSITE_PRINT
        -:  457:#elif defined(__APPLE__) || defined(__FreeBSD__) || defined(__EMSCRIPTEN__) || defined(__NetBSD__)
        -:  458:# ifdef __APPLE__
        -:  459:    typedef __uint32_t mask;
        -:  460:# elif defined(__FreeBSD__)
        -:  461:    typedef unsigned long mask;
        -:  462:# elif defined(__EMSCRIPTEN__) || defined(__NetBSD__)
        -:  463:    typedef unsigned short mask;
        -:  464:# endif
        -:  465:    static const mask space  = _CTYPE_S;
        -:  466:    static const mask print  = _CTYPE_R;
        -:  467:    static const mask cntrl  = _CTYPE_C;
        -:  468:    static const mask upper  = _CTYPE_U;
        -:  469:    static const mask lower  = _CTYPE_L;
        -:  470:    static const mask alpha  = _CTYPE_A;
        -:  471:    static const mask digit  = _CTYPE_D;
        -:  472:    static const mask punct  = _CTYPE_P;
        -:  473:    static const mask xdigit = _CTYPE_X;
        -:  474:
        -:  475:# if defined(__NetBSD__)
        -:  476:    static const mask blank  = _CTYPE_BL;
        -:  477:    // NetBSD defines classes up to 0x2000
        -:  478:    // see sys/ctype_bits.h, _CTYPE_Q
        -:  479:    static const mask __regex_word = 0x8000;
        -:  480:# else
        -:  481:    static const mask blank  = _CTYPE_B;
        -:  482:    static const mask __regex_word = 0x80;
        -:  483:# endif
        -:  484:#elif defined(__sun__) || defined(_AIX)
        -:  485:    typedef unsigned int mask;
        -:  486:    static const mask space  = _ISSPACE;
        -:  487:    static const mask print  = _ISPRINT;
        -:  488:    static const mask cntrl  = _ISCNTRL;
        -:  489:    static const mask upper  = _ISUPPER;
        -:  490:    static const mask lower  = _ISLOWER;
        -:  491:    static const mask alpha  = _ISALPHA;
        -:  492:    static const mask digit  = _ISDIGIT;
        -:  493:    static const mask punct  = _ISPUNCT;
        -:  494:    static const mask xdigit = _ISXDIGIT;
        -:  495:    static const mask blank  = _ISBLANK;
        -:  496:    static const mask __regex_word = 0x80;
        -:  497:#elif defined(_NEWLIB_VERSION)
        -:  498:    // Same type as Newlib's _ctype_ array in newlib/libc/include/ctype.h.
        -:  499:    typedef char mask;
        -:  500:    static const mask space  = _S;
        -:  501:    static const mask print  = _P | _U | _L | _N | _B;
        -:  502:    static const mask cntrl  = _C;
        -:  503:    static const mask upper  = _U;
        -:  504:    static const mask lower  = _L;
        -:  505:    static const mask alpha  = _U | _L;
        -:  506:    static const mask digit  = _N;
        -:  507:    static const mask punct  = _P;
        -:  508:    static const mask xdigit = _X | _N;
        -:  509:    static const mask blank  = _B;
        -:  510:    static const mask __regex_word = 0x80;
        -:  511:# define _LIBCPP_CTYPE_MASK_IS_COMPOSITE_PRINT
        -:  512:# define _LIBCPP_CTYPE_MASK_IS_COMPOSITE_ALPHA
        -:  513:# define _LIBCPP_CTYPE_MASK_IS_COMPOSITE_XDIGIT
        -:  514:#else
        -:  515:# error unknown rune table for this platform -- do you mean to define _LIBCPP_PROVIDES_DEFAULT_RUNE_TABLE?
        -:  516:#endif
        -:  517:    static const mask alnum  = alpha | digit;
        -:  518:    static const mask graph  = alnum | punct;
        -:  519:
        -:  520:    _LIBCPP_INLINE_VISIBILITY ctype_base() {}
        -:  521:};
        -:  522:
        -:  523:template <class _CharT> class _LIBCPP_TEMPLATE_VIS ctype;
        -:  524:
        -:  525:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -:  526:template <>
        -:  527:class _LIBCPP_TYPE_VIS ctype<wchar_t>
        -:  528:    : public locale::facet,
        -:  529:      public ctype_base
        -:  530:{
        -:  531:public:
        -:  532:    typedef wchar_t char_type;
        -:  533:
        -:  534:    _LIBCPP_INLINE_VISIBILITY
        -:  535:    explicit ctype(size_t __refs = 0)
        -:  536:        : locale::facet(__refs) {}
        -:  537:
        -:  538:    _LIBCPP_INLINE_VISIBILITY
        -:  539:    bool is(mask __m, char_type __c) const
        -:  540:    {
        -:  541:        return do_is(__m, __c);
        -:  542:    }
        -:  543:
        -:  544:    _LIBCPP_INLINE_VISIBILITY
        -:  545:    const char_type* is(const char_type* __low, const char_type* __high, mask* __vec) const
        -:  546:    {
        -:  547:        return do_is(__low, __high, __vec);
        -:  548:    }
        -:  549:
        -:  550:    _LIBCPP_INLINE_VISIBILITY
        -:  551:    const char_type* scan_is(mask __m, const char_type* __low, const char_type* __high) const
        -:  552:    {
        -:  553:        return do_scan_is(__m, __low, __high);
        -:  554:    }
        -:  555:
        -:  556:    _LIBCPP_INLINE_VISIBILITY
        -:  557:    const char_type* scan_not(mask __m, const char_type* __low, const char_type* __high) const
        -:  558:    {
        -:  559:        return do_scan_not(__m, __low, __high);
        -:  560:    }
        -:  561:
        -:  562:    _LIBCPP_INLINE_VISIBILITY
        -:  563:    char_type toupper(char_type __c) const
        -:  564:    {
        -:  565:        return do_toupper(__c);
        -:  566:    }
        -:  567:
        -:  568:    _LIBCPP_INLINE_VISIBILITY
        -:  569:    const char_type* toupper(char_type* __low, const char_type* __high) const
        -:  570:    {
        -:  571:        return do_toupper(__low, __high);
        -:  572:    }
        -:  573:
        -:  574:    _LIBCPP_INLINE_VISIBILITY
        -:  575:    char_type tolower(char_type __c) const
        -:  576:    {
        -:  577:        return do_tolower(__c);
        -:  578:    }
        -:  579:
        -:  580:    _LIBCPP_INLINE_VISIBILITY
        -:  581:    const char_type* tolower(char_type* __low, const char_type* __high) const
        -:  582:    {
        -:  583:        return do_tolower(__low, __high);
        -:  584:    }
        -:  585:
        -:  586:    _LIBCPP_INLINE_VISIBILITY
        -:  587:    char_type widen(char __c) const
        -:  588:    {
        -:  589:        return do_widen(__c);
        -:  590:    }
        -:  591:
        -:  592:    _LIBCPP_INLINE_VISIBILITY
        -:  593:    const char* widen(const char* __low, const char* __high, char_type* __to) const
        -:  594:    {
        -:  595:        return do_widen(__low, __high, __to);
        -:  596:    }
        -:  597:
        -:  598:    _LIBCPP_INLINE_VISIBILITY
        -:  599:    char narrow(char_type __c, char __dfault) const
        -:  600:    {
        -:  601:        return do_narrow(__c, __dfault);
        -:  602:    }
        -:  603:
        -:  604:    _LIBCPP_INLINE_VISIBILITY
        -:  605:    const char_type* narrow(const char_type* __low, const char_type* __high, char __dfault, char* __to) const
        -:  606:    {
        -:  607:        return do_narrow(__low, __high, __dfault, __to);
        -:  608:    }
        -:  609:
        -:  610:    static locale::id id;
        -:  611:
        -:  612:protected:
        -:  613:    ~ctype();
        -:  614:    virtual bool do_is(mask __m, char_type __c) const;
        -:  615:    virtual const char_type* do_is(const char_type* __low, const char_type* __high, mask* __vec) const;
        -:  616:    virtual const char_type* do_scan_is(mask __m, const char_type* __low, const char_type* __high) const;
        -:  617:    virtual const char_type* do_scan_not(mask __m, const char_type* __low, const char_type* __high) const;
        -:  618:    virtual char_type do_toupper(char_type) const;
        -:  619:    virtual const char_type* do_toupper(char_type* __low, const char_type* __high) const;
        -:  620:    virtual char_type do_tolower(char_type) const;
        -:  621:    virtual const char_type* do_tolower(char_type* __low, const char_type* __high) const;
        -:  622:    virtual char_type do_widen(char) const;
        -:  623:    virtual const char* do_widen(const char* __low, const char* __high, char_type* __dest) const;
        -:  624:    virtual char do_narrow(char_type, char __dfault) const;
        -:  625:    virtual const char_type* do_narrow(const char_type* __low, const char_type* __high, char __dfault, char* __dest) const;
        -:  626:};
        -:  627:#endif // _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -:  628:
        -:  629:template <>
        -:  630:class _LIBCPP_TYPE_VIS ctype<char>
        -:  631:    : public locale::facet, public ctype_base
        -:  632:{
        -:  633:    const mask* __tab_;
        -:  634:    bool        __del_;
        -:  635:public:
        -:  636:    typedef char char_type;
        -:  637:
        -:  638:    explicit ctype(const mask* __tab = nullptr, bool __del = false, size_t __refs = 0);
        -:  639:
        -:  640:    _LIBCPP_INLINE_VISIBILITY
        -:  641:    bool is(mask __m, char_type __c) const
        -:  642:    {
        -:  643:        return isascii(__c) ? (__tab_[static_cast<int>(__c)] & __m) !=0 : false;
        -:  644:    }
        -:  645:
        -:  646:    _LIBCPP_INLINE_VISIBILITY
        -:  647:    const char_type* is(const char_type* __low, const char_type* __high, mask* __vec) const
        -:  648:    {
        -:  649:        for (; __low != __high; ++__low, ++__vec)
        -:  650:            *__vec = isascii(*__low) ? __tab_[static_cast<int>(*__low)] : 0;
        -:  651:        return __low;
        -:  652:    }
        -:  653:
        -:  654:    _LIBCPP_INLINE_VISIBILITY
        -:  655:    const char_type* scan_is (mask __m, const char_type* __low, const char_type* __high) const
        -:  656:    {
        -:  657:        for (; __low != __high; ++__low)
        -:  658:            if (isascii(*__low) && (__tab_[static_cast<int>(*__low)] & __m))
        -:  659:                break;
        -:  660:        return __low;
        -:  661:    }
        -:  662:
        -:  663:    _LIBCPP_INLINE_VISIBILITY
        -:  664:    const char_type* scan_not(mask __m, const char_type* __low, const char_type* __high) const
        -:  665:    {
        -:  666:        for (; __low != __high; ++__low)
        -:  667:            if (!(isascii(*__low) && (__tab_[static_cast<int>(*__low)] & __m)))
        -:  668:                break;
        -:  669:        return __low;
        -:  670:    }
        -:  671:
        -:  672:    _LIBCPP_INLINE_VISIBILITY
        -:  673:    char_type toupper(char_type __c) const
        -:  674:    {
        -:  675:        return do_toupper(__c);
        -:  676:    }
        -:  677:
        -:  678:    _LIBCPP_INLINE_VISIBILITY
        -:  679:    const char_type* toupper(char_type* __low, const char_type* __high) const
        -:  680:    {
        -:  681:        return do_toupper(__low, __high);
        -:  682:    }
        -:  683:
        -:  684:    _LIBCPP_INLINE_VISIBILITY
        -:  685:    char_type tolower(char_type __c) const
        -:  686:    {
        -:  687:        return do_tolower(__c);
        -:  688:    }
        -:  689:
        -:  690:    _LIBCPP_INLINE_VISIBILITY
        -:  691:    const char_type* tolower(char_type* __low, const char_type* __high) const
        -:  692:    {
        -:  693:        return do_tolower(__low, __high);
        -:  694:    }
        -:  695:
        -:  696:    _LIBCPP_INLINE_VISIBILITY
    #####:  697:    char_type widen(char __c) const
        -:  698:    {
    #####:  699:        return do_widen(__c);
        -:  700:    }
        -:  701:
        -:  702:    _LIBCPP_INLINE_VISIBILITY
        -:  703:    const char* widen(const char* __low, const char* __high, char_type* __to) const
        -:  704:    {
        -:  705:        return do_widen(__low, __high, __to);
        -:  706:    }
        -:  707:
        -:  708:    _LIBCPP_INLINE_VISIBILITY
        -:  709:    char narrow(char_type __c, char __dfault) const
        -:  710:    {
        -:  711:        return do_narrow(__c, __dfault);
        -:  712:    }
        -:  713:
        -:  714:    _LIBCPP_INLINE_VISIBILITY
        -:  715:    const char* narrow(const char_type* __low, const char_type* __high, char __dfault, char* __to) const
        -:  716:    {
        -:  717:        return do_narrow(__low, __high, __dfault, __to);
        -:  718:    }
        -:  719:
        -:  720:    static locale::id id;
        -:  721:
        -:  722:#ifdef _CACHED_RUNES
        -:  723:    static const size_t table_size = _CACHED_RUNES;
        -:  724:#else
        -:  725:    static const size_t table_size = 256;  // FIXME: Don't hardcode this.
        -:  726:#endif
        -:  727:    _LIBCPP_INLINE_VISIBILITY const mask* table() const  _NOEXCEPT {return __tab_;}
        -:  728:    static const mask* classic_table()  _NOEXCEPT;
        -:  729:#if defined(__GLIBC__) || defined(__EMSCRIPTEN__)
        -:  730:    static const int* __classic_upper_table() _NOEXCEPT;
        -:  731:    static const int* __classic_lower_table() _NOEXCEPT;
        -:  732:#endif
        -:  733:#if defined(__NetBSD__)
        -:  734:    static const short* __classic_upper_table() _NOEXCEPT;
        -:  735:    static const short* __classic_lower_table() _NOEXCEPT;
        -:  736:#endif
        -:  737:
        -:  738:protected:
        -:  739:    ~ctype();
        -:  740:    virtual char_type do_toupper(char_type __c) const;
        -:  741:    virtual const char_type* do_toupper(char_type* __low, const char_type* __high) const;
        -:  742:    virtual char_type do_tolower(char_type __c) const;
        -:  743:    virtual const char_type* do_tolower(char_type* __low, const char_type* __high) const;
        -:  744:    virtual char_type do_widen(char __c) const;
        -:  745:    virtual const char* do_widen(const char* __low, const char* __high, char_type* __to) const;
        -:  746:    virtual char do_narrow(char_type __c, char __dfault) const;
        -:  747:    virtual const char* do_narrow(const char_type* __low, const char_type* __high, char __dfault, char* __to) const;
        -:  748:};
        -:  749:
        -:  750:// template <class CharT> class ctype_byname;
        -:  751:
        -:  752:template <class _CharT> class _LIBCPP_TEMPLATE_VIS ctype_byname;
        -:  753:
        -:  754:template <>
        -:  755:class _LIBCPP_TYPE_VIS ctype_byname<char>
        -:  756:    : public ctype<char>
        -:  757:{
        -:  758:    locale_t __l;
        -:  759:
        -:  760:public:
        -:  761:    explicit ctype_byname(const char*, size_t = 0);
        -:  762:    explicit ctype_byname(const string&, size_t = 0);
        -:  763:
        -:  764:protected:
        -:  765:    ~ctype_byname();
        -:  766:    virtual char_type do_toupper(char_type) const;
        -:  767:    virtual const char_type* do_toupper(char_type* __low, const char_type* __high) const;
        -:  768:    virtual char_type do_tolower(char_type) const;
        -:  769:    virtual const char_type* do_tolower(char_type* __low, const char_type* __high) const;
        -:  770:};
        -:  771:
        -:  772:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -:  773:template <>
        -:  774:class _LIBCPP_TYPE_VIS ctype_byname<wchar_t>
        -:  775:    : public ctype<wchar_t>
        -:  776:{
        -:  777:    locale_t __l;
        -:  778:
        -:  779:public:
        -:  780:    explicit ctype_byname(const char*, size_t = 0);
        -:  781:    explicit ctype_byname(const string&, size_t = 0);
        -:  782:
        -:  783:protected:
        -:  784:    ~ctype_byname();
        -:  785:    virtual bool do_is(mask __m, char_type __c) const;
        -:  786:    virtual const char_type* do_is(const char_type* __low, const char_type* __high, mask* __vec) const;
        -:  787:    virtual const char_type* do_scan_is(mask __m, const char_type* __low, const char_type* __high) const;
        -:  788:    virtual const char_type* do_scan_not(mask __m, const char_type* __low, const char_type* __high) const;
        -:  789:    virtual char_type do_toupper(char_type) const;
        -:  790:    virtual const char_type* do_toupper(char_type* __low, const char_type* __high) const;
        -:  791:    virtual char_type do_tolower(char_type) const;
        -:  792:    virtual const char_type* do_tolower(char_type* __low, const char_type* __high) const;
        -:  793:    virtual char_type do_widen(char) const;
        -:  794:    virtual const char* do_widen(const char* __low, const char* __high, char_type* __dest) const;
        -:  795:    virtual char do_narrow(char_type, char __dfault) const;
        -:  796:    virtual const char_type* do_narrow(const char_type* __low, const char_type* __high, char __dfault, char* __dest) const;
        -:  797:};
        -:  798:#endif // _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -:  799:
        -:  800:template <class _CharT>
        -:  801:inline _LIBCPP_INLINE_VISIBILITY
        -:  802:bool
        -:  803:isspace(_CharT __c, const locale& __loc)
        -:  804:{
        -:  805:    return use_facet<ctype<_CharT> >(__loc).is(ctype_base::space, __c);
        -:  806:}
        -:  807:
        -:  808:template <class _CharT>
        -:  809:inline _LIBCPP_INLINE_VISIBILITY
        -:  810:bool
        -:  811:isprint(_CharT __c, const locale& __loc)
        -:  812:{
        -:  813:    return use_facet<ctype<_CharT> >(__loc).is(ctype_base::print, __c);
        -:  814:}
        -:  815:
        -:  816:template <class _CharT>
        -:  817:inline _LIBCPP_INLINE_VISIBILITY
        -:  818:bool
        -:  819:iscntrl(_CharT __c, const locale& __loc)
        -:  820:{
        -:  821:    return use_facet<ctype<_CharT> >(__loc).is(ctype_base::cntrl, __c);
        -:  822:}
        -:  823:
        -:  824:template <class _CharT>
        -:  825:inline _LIBCPP_INLINE_VISIBILITY
        -:  826:bool
        -:  827:isupper(_CharT __c, const locale& __loc)
        -:  828:{
        -:  829:    return use_facet<ctype<_CharT> >(__loc).is(ctype_base::upper, __c);
        -:  830:}
        -:  831:
        -:  832:template <class _CharT>
        -:  833:inline _LIBCPP_INLINE_VISIBILITY
        -:  834:bool
        -:  835:islower(_CharT __c, const locale& __loc)
        -:  836:{
        -:  837:    return use_facet<ctype<_CharT> >(__loc).is(ctype_base::lower, __c);
        -:  838:}
        -:  839:
        -:  840:template <class _CharT>
        -:  841:inline _LIBCPP_INLINE_VISIBILITY
        -:  842:bool
        -:  843:isalpha(_CharT __c, const locale& __loc)
        -:  844:{
        -:  845:    return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alpha, __c);
        -:  846:}
        -:  847:
        -:  848:template <class _CharT>
        -:  849:inline _LIBCPP_INLINE_VISIBILITY
        -:  850:bool
        -:  851:isdigit(_CharT __c, const locale& __loc)
        -:  852:{
        -:  853:    return use_facet<ctype<_CharT> >(__loc).is(ctype_base::digit, __c);
        -:  854:}
        -:  855:
        -:  856:template <class _CharT>
        -:  857:inline _LIBCPP_INLINE_VISIBILITY
        -:  858:bool
        -:  859:ispunct(_CharT __c, const locale& __loc)
        -:  860:{
        -:  861:    return use_facet<ctype<_CharT> >(__loc).is(ctype_base::punct, __c);
        -:  862:}
        -:  863:
        -:  864:template <class _CharT>
        -:  865:inline _LIBCPP_INLINE_VISIBILITY
        -:  866:bool
        -:  867:isxdigit(_CharT __c, const locale& __loc)
        -:  868:{
        -:  869:    return use_facet<ctype<_CharT> >(__loc).is(ctype_base::xdigit, __c);
        -:  870:}
        -:  871:
        -:  872:template <class _CharT>
        -:  873:inline _LIBCPP_INLINE_VISIBILITY
        -:  874:bool
        -:  875:isalnum(_CharT __c, const locale& __loc)
        -:  876:{
        -:  877:    return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alnum, __c);
        -:  878:}
        -:  879:
        -:  880:template <class _CharT>
        -:  881:inline _LIBCPP_INLINE_VISIBILITY
        -:  882:bool
        -:  883:isgraph(_CharT __c, const locale& __loc)
        -:  884:{
        -:  885:    return use_facet<ctype<_CharT> >(__loc).is(ctype_base::graph, __c);
        -:  886:}
        -:  887:
        -:  888:template <class _CharT>
        -:  889:inline _LIBCPP_INLINE_VISIBILITY
        -:  890:_CharT
        -:  891:toupper(_CharT __c, const locale& __loc)
        -:  892:{
        -:  893:    return use_facet<ctype<_CharT> >(__loc).toupper(__c);
        -:  894:}
        -:  895:
        -:  896:template <class _CharT>
        -:  897:inline _LIBCPP_INLINE_VISIBILITY
        -:  898:_CharT
        -:  899:tolower(_CharT __c, const locale& __loc)
        -:  900:{
        -:  901:    return use_facet<ctype<_CharT> >(__loc).tolower(__c);
        -:  902:}
        -:  903:
        -:  904:// codecvt_base
        -:  905:
        -:  906:class _LIBCPP_TYPE_VIS codecvt_base
        -:  907:{
        -:  908:public:
        -:  909:    _LIBCPP_INLINE_VISIBILITY codecvt_base() {}
        -:  910:    enum result {ok, partial, error, noconv};
        -:  911:};
        -:  912:
        -:  913:// template <class internT, class externT, class stateT> class codecvt;
        -:  914:
        -:  915:template <class _InternT, class _ExternT, class _StateT> class _LIBCPP_TEMPLATE_VIS codecvt;
        -:  916:
        -:  917:// template <> class codecvt<char, char, mbstate_t>
        -:  918:
        -:  919:template <>
        -:  920:class _LIBCPP_TYPE_VIS codecvt<char, char, mbstate_t>
        -:  921:    : public locale::facet,
        -:  922:      public codecvt_base
        -:  923:{
        -:  924:public:
        -:  925:    typedef char      intern_type;
        -:  926:    typedef char      extern_type;
        -:  927:    typedef mbstate_t state_type;
        -:  928:
        -:  929:    _LIBCPP_INLINE_VISIBILITY
        -:  930:    explicit codecvt(size_t __refs = 0)
        -:  931:        : locale::facet(__refs) {}
        -:  932:
        -:  933:    _LIBCPP_INLINE_VISIBILITY
        -:  934:    result out(state_type& __st,
        -:  935:               const intern_type* __frm, const intern_type* __frm_end, const intern_type*& __frm_nxt,
        -:  936:               extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const
        -:  937:    {
        -:  938:        return do_out(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
        -:  939:    }
        -:  940:
        -:  941:    _LIBCPP_INLINE_VISIBILITY
        -:  942:    result unshift(state_type& __st,
        -:  943:                   extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const
        -:  944:    {
        -:  945:        return do_unshift(__st, __to, __to_end, __to_nxt);
        -:  946:    }
        -:  947:
        -:  948:    _LIBCPP_INLINE_VISIBILITY
        -:  949:    result in(state_type& __st,
        -:  950:              const extern_type* __frm, const extern_type* __frm_end, const extern_type*& __frm_nxt,
        -:  951:              intern_type* __to, intern_type* __to_end, intern_type*& __to_nxt) const
        -:  952:    {
        -:  953:        return do_in(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
        -:  954:    }
        -:  955:
        -:  956:    _LIBCPP_INLINE_VISIBILITY
        -:  957:    int encoding() const  _NOEXCEPT
        -:  958:    {
        -:  959:        return do_encoding();
        -:  960:    }
        -:  961:
        -:  962:    _LIBCPP_INLINE_VISIBILITY
        -:  963:    bool always_noconv() const  _NOEXCEPT
        -:  964:    {
        -:  965:        return do_always_noconv();
        -:  966:    }
        -:  967:
        -:  968:    _LIBCPP_INLINE_VISIBILITY
        -:  969:    int length(state_type& __st, const extern_type* __frm, const extern_type* __end, size_t __mx) const
        -:  970:    {
        -:  971:        return do_length(__st, __frm, __end, __mx);
        -:  972:    }
        -:  973:
        -:  974:    _LIBCPP_INLINE_VISIBILITY
        -:  975:    int max_length() const  _NOEXCEPT
        -:  976:    {
        -:  977:        return do_max_length();
        -:  978:    }
        -:  979:
        -:  980:    static locale::id id;
        -:  981:
        -:  982:protected:
        -:  983:    _LIBCPP_INLINE_VISIBILITY
        -:  984:    explicit codecvt(const char*, size_t __refs = 0)
        -:  985:        : locale::facet(__refs) {}
        -:  986:
        -:  987:    ~codecvt();
        -:  988:
        -:  989:    virtual result do_out(state_type& __st,
        -:  990:                          const intern_type* __frm, const intern_type* __frm_end, const intern_type*& __frm_nxt,
        -:  991:                          extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;
        -:  992:    virtual result do_in(state_type& __st,
        -:  993:                         const extern_type* __frm, const extern_type* __frm_end, const extern_type*& __frm_nxt,
        -:  994:                         intern_type* __to, intern_type* __to_end, intern_type*& __to_nxt) const;
        -:  995:    virtual result do_unshift(state_type& __st,
        -:  996:                              extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;
        -:  997:    virtual int do_encoding() const  _NOEXCEPT;
        -:  998:    virtual bool do_always_noconv() const  _NOEXCEPT;
        -:  999:    virtual int do_length(state_type& __st, const extern_type* __frm, const extern_type* __end, size_t __mx) const;
        -: 1000:    virtual int do_max_length() const  _NOEXCEPT;
        -: 1001:};
        -: 1002:
        -: 1003:// template <> class codecvt<wchar_t, char, mbstate_t>
        -: 1004:
        -: 1005:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 1006:template <>
        -: 1007:class _LIBCPP_TYPE_VIS codecvt<wchar_t, char, mbstate_t>
        -: 1008:    : public locale::facet,
        -: 1009:      public codecvt_base
        -: 1010:{
        -: 1011:    locale_t __l;
        -: 1012:public:
        -: 1013:    typedef wchar_t   intern_type;
        -: 1014:    typedef char      extern_type;
        -: 1015:    typedef mbstate_t state_type;
        -: 1016:
        -: 1017:    explicit codecvt(size_t __refs = 0);
        -: 1018:
        -: 1019:    _LIBCPP_INLINE_VISIBILITY
        -: 1020:    result out(state_type& __st,
        -: 1021:               const intern_type* __frm, const intern_type* __frm_end, const intern_type*& __frm_nxt,
        -: 1022:               extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const
        -: 1023:    {
        -: 1024:        return do_out(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
        -: 1025:    }
        -: 1026:
        -: 1027:    _LIBCPP_INLINE_VISIBILITY
        -: 1028:    result unshift(state_type& __st,
        -: 1029:                   extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const
        -: 1030:    {
        -: 1031:        return do_unshift(__st, __to, __to_end, __to_nxt);
        -: 1032:    }
        -: 1033:
        -: 1034:    _LIBCPP_INLINE_VISIBILITY
        -: 1035:    result in(state_type& __st,
        -: 1036:              const extern_type* __frm, const extern_type* __frm_end, const extern_type*& __frm_nxt,
        -: 1037:              intern_type* __to, intern_type* __to_end, intern_type*& __to_nxt) const
        -: 1038:    {
        -: 1039:        return do_in(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
        -: 1040:    }
        -: 1041:
        -: 1042:    _LIBCPP_INLINE_VISIBILITY
        -: 1043:    int encoding() const  _NOEXCEPT
        -: 1044:    {
        -: 1045:        return do_encoding();
        -: 1046:    }
        -: 1047:
        -: 1048:    _LIBCPP_INLINE_VISIBILITY
        -: 1049:    bool always_noconv() const  _NOEXCEPT
        -: 1050:    {
        -: 1051:        return do_always_noconv();
        -: 1052:    }
        -: 1053:
        -: 1054:    _LIBCPP_INLINE_VISIBILITY
        -: 1055:    int length(state_type& __st, const extern_type* __frm, const extern_type* __end, size_t __mx) const
        -: 1056:    {
        -: 1057:        return do_length(__st, __frm, __end, __mx);
        -: 1058:    }
        -: 1059:
        -: 1060:    _LIBCPP_INLINE_VISIBILITY
        -: 1061:    int max_length() const  _NOEXCEPT
        -: 1062:    {
        -: 1063:        return do_max_length();
        -: 1064:    }
        -: 1065:
        -: 1066:    static locale::id id;
        -: 1067:
        -: 1068:protected:
        -: 1069:    explicit codecvt(const char*, size_t __refs = 0);
        -: 1070:
        -: 1071:    ~codecvt();
        -: 1072:
        -: 1073:    virtual result do_out(state_type& __st,
        -: 1074:                          const intern_type* __frm, const intern_type* __frm_end, const intern_type*& __frm_nxt,
        -: 1075:                          extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;
        -: 1076:    virtual result do_in(state_type& __st,
        -: 1077:                         const extern_type* __frm, const extern_type* __frm_end, const extern_type*& __frm_nxt,
        -: 1078:                         intern_type* __to, intern_type* __to_end, intern_type*& __to_nxt) const;
        -: 1079:    virtual result do_unshift(state_type& __st,
        -: 1080:                              extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;
        -: 1081:    virtual int do_encoding() const  _NOEXCEPT;
        -: 1082:    virtual bool do_always_noconv() const  _NOEXCEPT;
        -: 1083:    virtual int do_length(state_type&, const extern_type* __frm, const extern_type* __end, size_t __mx) const;
        -: 1084:    virtual int do_max_length() const  _NOEXCEPT;
        -: 1085:};
        -: 1086:#endif // _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 1087:
        -: 1088:// template <> class codecvt<char16_t, char, mbstate_t> // deprecated in C++20
        -: 1089:
        -: 1090:template <>
        -: 1091:class _LIBCPP_DEPRECATED_IN_CXX20 _LIBCPP_TYPE_VIS codecvt<char16_t, char, mbstate_t>
        -: 1092:    : public locale::facet,
        -: 1093:      public codecvt_base
        -: 1094:{
        -: 1095:public:
        -: 1096:    typedef char16_t  intern_type;
        -: 1097:    typedef char      extern_type;
        -: 1098:    typedef mbstate_t state_type;
        -: 1099:
        -: 1100:    _LIBCPP_INLINE_VISIBILITY
        -: 1101:    explicit codecvt(size_t __refs = 0)
        -: 1102:        : locale::facet(__refs) {}
        -: 1103:
        -: 1104:    _LIBCPP_INLINE_VISIBILITY
        -: 1105:    result out(state_type& __st,
        -: 1106:               const intern_type* __frm, const intern_type* __frm_end, const intern_type*& __frm_nxt,
        -: 1107:               extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const
        -: 1108:    {
        -: 1109:        return do_out(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
        -: 1110:    }
        -: 1111:
        -: 1112:    _LIBCPP_INLINE_VISIBILITY
        -: 1113:    result unshift(state_type& __st,
        -: 1114:                   extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const
        -: 1115:    {
        -: 1116:        return do_unshift(__st, __to, __to_end, __to_nxt);
        -: 1117:    }
        -: 1118:
        -: 1119:    _LIBCPP_INLINE_VISIBILITY
        -: 1120:    result in(state_type& __st,
        -: 1121:              const extern_type* __frm, const extern_type* __frm_end, const extern_type*& __frm_nxt,
        -: 1122:              intern_type* __to, intern_type* __to_end, intern_type*& __to_nxt) const
        -: 1123:    {
        -: 1124:        return do_in(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
        -: 1125:    }
        -: 1126:
        -: 1127:    _LIBCPP_INLINE_VISIBILITY
        -: 1128:    int encoding() const  _NOEXCEPT
        -: 1129:    {
        -: 1130:        return do_encoding();
        -: 1131:    }
        -: 1132:
        -: 1133:    _LIBCPP_INLINE_VISIBILITY
        -: 1134:    bool always_noconv() const  _NOEXCEPT
        -: 1135:    {
        -: 1136:        return do_always_noconv();
        -: 1137:    }
        -: 1138:
        -: 1139:    _LIBCPP_INLINE_VISIBILITY
        -: 1140:    int length(state_type& __st, const extern_type* __frm, const extern_type* __end, size_t __mx) const
        -: 1141:    {
        -: 1142:        return do_length(__st, __frm, __end, __mx);
        -: 1143:    }
        -: 1144:
        -: 1145:    _LIBCPP_INLINE_VISIBILITY
        -: 1146:    int max_length() const  _NOEXCEPT
        -: 1147:    {
        -: 1148:        return do_max_length();
        -: 1149:    }
        -: 1150:
        -: 1151:    static locale::id id;
        -: 1152:
        -: 1153:protected:
        -: 1154:    _LIBCPP_INLINE_VISIBILITY
        -: 1155:    explicit codecvt(const char*, size_t __refs = 0)
        -: 1156:        : locale::facet(__refs) {}
        -: 1157:
        -: 1158:    ~codecvt();
        -: 1159:
        -: 1160:    virtual result do_out(state_type& __st,
        -: 1161:                          const intern_type* __frm, const intern_type* __frm_end, const intern_type*& __frm_nxt,
        -: 1162:                          extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;
        -: 1163:    virtual result do_in(state_type& __st,
        -: 1164:                         const extern_type* __frm, const extern_type* __frm_end, const extern_type*& __frm_nxt,
        -: 1165:                         intern_type* __to, intern_type* __to_end, intern_type*& __to_nxt) const;
        -: 1166:    virtual result do_unshift(state_type& __st,
        -: 1167:                              extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;
        -: 1168:    virtual int do_encoding() const  _NOEXCEPT;
        -: 1169:    virtual bool do_always_noconv() const  _NOEXCEPT;
        -: 1170:    virtual int do_length(state_type&, const extern_type* __frm, const extern_type* __end, size_t __mx) const;
        -: 1171:    virtual int do_max_length() const  _NOEXCEPT;
        -: 1172:};
        -: 1173:
        -: 1174:#ifndef _LIBCPP_HAS_NO_CHAR8_T
        -: 1175:
        -: 1176:// template <> class codecvt<char16_t, char8_t, mbstate_t> // C++20
        -: 1177:
        -: 1178:template <>
        -: 1179:class _LIBCPP_TYPE_VIS codecvt<char16_t, char8_t, mbstate_t>
        -: 1180:    : public locale::facet,
        -: 1181:      public codecvt_base
        -: 1182:{
        -: 1183:public:
        -: 1184:    typedef char16_t  intern_type;
        -: 1185:    typedef char8_t   extern_type;
        -: 1186:    typedef mbstate_t state_type;
        -: 1187:
        -: 1188:    _LIBCPP_INLINE_VISIBILITY
        -: 1189:    explicit codecvt(size_t __refs = 0)
        -: 1190:        : locale::facet(__refs) {}
        -: 1191:
        -: 1192:    _LIBCPP_INLINE_VISIBILITY
        -: 1193:    result out(state_type& __st,
        -: 1194:               const intern_type* __frm, const intern_type* __frm_end, const intern_type*& __frm_nxt,
        -: 1195:               extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const
        -: 1196:    {
        -: 1197:        return do_out(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
        -: 1198:    }
        -: 1199:
        -: 1200:    _LIBCPP_INLINE_VISIBILITY
        -: 1201:    result unshift(state_type& __st,
        -: 1202:                   extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const
        -: 1203:    {
        -: 1204:        return do_unshift(__st, __to, __to_end, __to_nxt);
        -: 1205:    }
        -: 1206:
        -: 1207:    _LIBCPP_INLINE_VISIBILITY
        -: 1208:    result in(state_type& __st,
        -: 1209:              const extern_type* __frm, const extern_type* __frm_end, const extern_type*& __frm_nxt,
        -: 1210:              intern_type* __to, intern_type* __to_end, intern_type*& __to_nxt) const
        -: 1211:    {
        -: 1212:        return do_in(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
        -: 1213:    }
        -: 1214:
        -: 1215:    _LIBCPP_INLINE_VISIBILITY
        -: 1216:    int encoding() const  _NOEXCEPT
        -: 1217:    {
        -: 1218:        return do_encoding();
        -: 1219:    }
        -: 1220:
        -: 1221:    _LIBCPP_INLINE_VISIBILITY
        -: 1222:    bool always_noconv() const  _NOEXCEPT
        -: 1223:    {
        -: 1224:        return do_always_noconv();
        -: 1225:    }
        -: 1226:
        -: 1227:    _LIBCPP_INLINE_VISIBILITY
        -: 1228:    int length(state_type& __st, const extern_type* __frm, const extern_type* __end, size_t __mx) const
        -: 1229:    {
        -: 1230:        return do_length(__st, __frm, __end, __mx);
        -: 1231:    }
        -: 1232:
        -: 1233:    _LIBCPP_INLINE_VISIBILITY
        -: 1234:    int max_length() const  _NOEXCEPT
        -: 1235:    {
        -: 1236:        return do_max_length();
        -: 1237:    }
        -: 1238:
        -: 1239:    static locale::id id;
        -: 1240:
        -: 1241:protected:
        -: 1242:    _LIBCPP_INLINE_VISIBILITY
        -: 1243:    explicit codecvt(const char*, size_t __refs = 0)
        -: 1244:        : locale::facet(__refs) {}
        -: 1245:
        -: 1246:    ~codecvt();
        -: 1247:
        -: 1248:    virtual result do_out(state_type& __st,
        -: 1249:                          const intern_type* __frm, const intern_type* __frm_end, const intern_type*& __frm_nxt,
        -: 1250:                          extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;
        -: 1251:    virtual result do_in(state_type& __st,
        -: 1252:                         const extern_type* __frm, const extern_type* __frm_end, const extern_type*& __frm_nxt,
        -: 1253:                         intern_type* __to, intern_type* __to_end, intern_type*& __to_nxt) const;
        -: 1254:    virtual result do_unshift(state_type& __st,
        -: 1255:                              extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;
        -: 1256:    virtual int do_encoding() const  _NOEXCEPT;
        -: 1257:    virtual bool do_always_noconv() const  _NOEXCEPT;
        -: 1258:    virtual int do_length(state_type&, const extern_type* __frm, const extern_type* __end, size_t __mx) const;
        -: 1259:    virtual int do_max_length() const  _NOEXCEPT;
        -: 1260:};
        -: 1261:
        -: 1262:#endif
        -: 1263:
        -: 1264:// template <> class codecvt<char32_t, char, mbstate_t> // deprecated in C++20
        -: 1265:
        -: 1266:template <>
        -: 1267:class _LIBCPP_DEPRECATED_IN_CXX20 _LIBCPP_TYPE_VIS codecvt<char32_t, char, mbstate_t>
        -: 1268:    : public locale::facet,
        -: 1269:      public codecvt_base
        -: 1270:{
        -: 1271:public:
        -: 1272:    typedef char32_t  intern_type;
        -: 1273:    typedef char      extern_type;
        -: 1274:    typedef mbstate_t state_type;
        -: 1275:
        -: 1276:    _LIBCPP_INLINE_VISIBILITY
        -: 1277:    explicit codecvt(size_t __refs = 0)
        -: 1278:        : locale::facet(__refs) {}
        -: 1279:
        -: 1280:    _LIBCPP_INLINE_VISIBILITY
        -: 1281:    result out(state_type& __st,
        -: 1282:               const intern_type* __frm, const intern_type* __frm_end, const intern_type*& __frm_nxt,
        -: 1283:               extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const
        -: 1284:    {
        -: 1285:        return do_out(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
        -: 1286:    }
        -: 1287:
        -: 1288:    _LIBCPP_INLINE_VISIBILITY
        -: 1289:    result unshift(state_type& __st,
        -: 1290:                   extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const
        -: 1291:    {
        -: 1292:        return do_unshift(__st, __to, __to_end, __to_nxt);
        -: 1293:    }
        -: 1294:
        -: 1295:    _LIBCPP_INLINE_VISIBILITY
        -: 1296:    result in(state_type& __st,
        -: 1297:              const extern_type* __frm, const extern_type* __frm_end, const extern_type*& __frm_nxt,
        -: 1298:              intern_type* __to, intern_type* __to_end, intern_type*& __to_nxt) const
        -: 1299:    {
        -: 1300:        return do_in(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
        -: 1301:    }
        -: 1302:
        -: 1303:    _LIBCPP_INLINE_VISIBILITY
        -: 1304:    int encoding() const  _NOEXCEPT
        -: 1305:    {
        -: 1306:        return do_encoding();
        -: 1307:    }
        -: 1308:
        -: 1309:    _LIBCPP_INLINE_VISIBILITY
        -: 1310:    bool always_noconv() const  _NOEXCEPT
        -: 1311:    {
        -: 1312:        return do_always_noconv();
        -: 1313:    }
        -: 1314:
        -: 1315:    _LIBCPP_INLINE_VISIBILITY
        -: 1316:    int length(state_type& __st, const extern_type* __frm, const extern_type* __end, size_t __mx) const
        -: 1317:    {
        -: 1318:        return do_length(__st, __frm, __end, __mx);
        -: 1319:    }
        -: 1320:
        -: 1321:    _LIBCPP_INLINE_VISIBILITY
        -: 1322:    int max_length() const  _NOEXCEPT
        -: 1323:    {
        -: 1324:        return do_max_length();
        -: 1325:    }
        -: 1326:
        -: 1327:    static locale::id id;
        -: 1328:
        -: 1329:protected:
        -: 1330:    _LIBCPP_INLINE_VISIBILITY
        -: 1331:    explicit codecvt(const char*, size_t __refs = 0)
        -: 1332:        : locale::facet(__refs) {}
        -: 1333:
        -: 1334:    ~codecvt();
        -: 1335:
        -: 1336:    virtual result do_out(state_type& __st,
        -: 1337:                          const intern_type* __frm, const intern_type* __frm_end, const intern_type*& __frm_nxt,
        -: 1338:                          extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;
        -: 1339:    virtual result do_in(state_type& __st,
        -: 1340:                         const extern_type* __frm, const extern_type* __frm_end, const extern_type*& __frm_nxt,
        -: 1341:                         intern_type* __to, intern_type* __to_end, intern_type*& __to_nxt) const;
        -: 1342:    virtual result do_unshift(state_type& __st,
        -: 1343:                              extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;
        -: 1344:    virtual int do_encoding() const  _NOEXCEPT;
        -: 1345:    virtual bool do_always_noconv() const  _NOEXCEPT;
        -: 1346:    virtual int do_length(state_type&, const extern_type* __frm, const extern_type* __end, size_t __mx) const;
        -: 1347:    virtual int do_max_length() const  _NOEXCEPT;
        -: 1348:};
        -: 1349:
        -: 1350:#ifndef _LIBCPP_HAS_NO_CHAR8_T
        -: 1351:
        -: 1352:// template <> class codecvt<char32_t, char8_t, mbstate_t> // C++20
        -: 1353:
        -: 1354:template <>
        -: 1355:class _LIBCPP_TYPE_VIS codecvt<char32_t, char8_t, mbstate_t>
        -: 1356:    : public locale::facet,
        -: 1357:      public codecvt_base
        -: 1358:{
        -: 1359:public:
        -: 1360:    typedef char32_t  intern_type;
        -: 1361:    typedef char8_t   extern_type;
        -: 1362:    typedef mbstate_t state_type;
        -: 1363:
        -: 1364:    _LIBCPP_INLINE_VISIBILITY
        -: 1365:    explicit codecvt(size_t __refs = 0)
        -: 1366:        : locale::facet(__refs) {}
        -: 1367:
        -: 1368:    _LIBCPP_INLINE_VISIBILITY
        -: 1369:    result out(state_type& __st,
        -: 1370:               const intern_type* __frm, const intern_type* __frm_end, const intern_type*& __frm_nxt,
        -: 1371:               extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const
        -: 1372:    {
        -: 1373:        return do_out(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
        -: 1374:    }
        -: 1375:
        -: 1376:    _LIBCPP_INLINE_VISIBILITY
        -: 1377:    result unshift(state_type& __st,
        -: 1378:                   extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const
        -: 1379:    {
        -: 1380:        return do_unshift(__st, __to, __to_end, __to_nxt);
        -: 1381:    }
        -: 1382:
        -: 1383:    _LIBCPP_INLINE_VISIBILITY
        -: 1384:    result in(state_type& __st,
        -: 1385:              const extern_type* __frm, const extern_type* __frm_end, const extern_type*& __frm_nxt,
        -: 1386:              intern_type* __to, intern_type* __to_end, intern_type*& __to_nxt) const
        -: 1387:    {
        -: 1388:        return do_in(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
        -: 1389:    }
        -: 1390:
        -: 1391:    _LIBCPP_INLINE_VISIBILITY
        -: 1392:    int encoding() const  _NOEXCEPT
        -: 1393:    {
        -: 1394:        return do_encoding();
        -: 1395:    }
        -: 1396:
        -: 1397:    _LIBCPP_INLINE_VISIBILITY
        -: 1398:    bool always_noconv() const  _NOEXCEPT
        -: 1399:    {
        -: 1400:        return do_always_noconv();
        -: 1401:    }
        -: 1402:
        -: 1403:    _LIBCPP_INLINE_VISIBILITY
        -: 1404:    int length(state_type& __st, const extern_type* __frm, const extern_type* __end, size_t __mx) const
        -: 1405:    {
        -: 1406:        return do_length(__st, __frm, __end, __mx);
        -: 1407:    }
        -: 1408:
        -: 1409:    _LIBCPP_INLINE_VISIBILITY
        -: 1410:    int max_length() const  _NOEXCEPT
        -: 1411:    {
        -: 1412:        return do_max_length();
        -: 1413:    }
        -: 1414:
        -: 1415:    static locale::id id;
        -: 1416:
        -: 1417:protected:
        -: 1418:    _LIBCPP_INLINE_VISIBILITY
        -: 1419:    explicit codecvt(const char*, size_t __refs = 0)
        -: 1420:        : locale::facet(__refs) {}
        -: 1421:
        -: 1422:    ~codecvt();
        -: 1423:
        -: 1424:    virtual result do_out(state_type& __st,
        -: 1425:                          const intern_type* __frm, const intern_type* __frm_end, const intern_type*& __frm_nxt,
        -: 1426:                          extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;
        -: 1427:    virtual result do_in(state_type& __st,
        -: 1428:                         const extern_type* __frm, const extern_type* __frm_end, const extern_type*& __frm_nxt,
        -: 1429:                         intern_type* __to, intern_type* __to_end, intern_type*& __to_nxt) const;
        -: 1430:    virtual result do_unshift(state_type& __st,
        -: 1431:                              extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;
        -: 1432:    virtual int do_encoding() const  _NOEXCEPT;
        -: 1433:    virtual bool do_always_noconv() const  _NOEXCEPT;
        -: 1434:    virtual int do_length(state_type&, const extern_type* __frm, const extern_type* __end, size_t __mx) const;
        -: 1435:    virtual int do_max_length() const  _NOEXCEPT;
        -: 1436:};
        -: 1437:
        -: 1438:#endif
        -: 1439:
        -: 1440:// template <class _InternT, class _ExternT, class _StateT> class codecvt_byname
        -: 1441:
        -: 1442:template <class _InternT, class _ExternT, class _StateT>
        -: 1443:class _LIBCPP_TEMPLATE_VIS codecvt_byname
        -: 1444:    : public codecvt<_InternT, _ExternT, _StateT>
        -: 1445:{
        -: 1446:public:
        -: 1447:    _LIBCPP_INLINE_VISIBILITY
        -: 1448:    explicit codecvt_byname(const char* __nm, size_t __refs = 0)
        -: 1449:        : codecvt<_InternT, _ExternT, _StateT>(__nm, __refs) {}
        -: 1450:    _LIBCPP_INLINE_VISIBILITY
        -: 1451:    explicit codecvt_byname(const string& __nm, size_t __refs = 0)
        -: 1452:        : codecvt<_InternT, _ExternT, _StateT>(__nm.c_str(), __refs) {}
        -: 1453:protected:
        -: 1454:    ~codecvt_byname();
        -: 1455:};
        -: 1456:
        -: 1457:_LIBCPP_SUPPRESS_DEPRECATED_PUSH
        -: 1458:template <class _InternT, class _ExternT, class _StateT>
        -: 1459:codecvt_byname<_InternT, _ExternT, _StateT>::~codecvt_byname()
        -: 1460:{
        -: 1461:}
        -: 1462:_LIBCPP_SUPPRESS_DEPRECATED_POP
        -: 1463:
        -: 1464:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS codecvt_byname<char, char, mbstate_t>)
        -: 1465:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 1466:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS codecvt_byname<wchar_t, char, mbstate_t>)
        -: 1467:#endif
        -: 1468:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_DEPRECATED_IN_CXX20 _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS codecvt_byname<char16_t, char, mbstate_t>) // deprecated in C++20
        -: 1469:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_DEPRECATED_IN_CXX20 _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS codecvt_byname<char32_t, char, mbstate_t>) // deprecated in C++20
        -: 1470:#ifndef _LIBCPP_HAS_NO_CHAR8_T
        -: 1471:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS codecvt_byname<char16_t, char8_t, mbstate_t>) // C++20
        -: 1472:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS codecvt_byname<char32_t, char8_t, mbstate_t>) // C++20
        -: 1473:#endif
        -: 1474:
        -: 1475:template <size_t _Np>
        -: 1476:struct __narrow_to_utf8
        -: 1477:{
        -: 1478:    template <class _OutputIterator, class _CharT>
        -: 1479:    _OutputIterator
        -: 1480:    operator()(_OutputIterator __s, const _CharT* __wb, const _CharT* __we) const;
        -: 1481:};
        -: 1482:
        -: 1483:template <>
        -: 1484:struct __narrow_to_utf8<8>
        -: 1485:{
        -: 1486:    template <class _OutputIterator, class _CharT>
        -: 1487:    _LIBCPP_INLINE_VISIBILITY
        -: 1488:    _OutputIterator
        -: 1489:    operator()(_OutputIterator __s, const _CharT* __wb, const _CharT* __we) const
        -: 1490:    {
        -: 1491:        for (; __wb < __we; ++__wb, ++__s)
        -: 1492:            *__s = *__wb;
        -: 1493:        return __s;
        -: 1494:    }
        -: 1495:};
        -: 1496:
        -: 1497:_LIBCPP_SUPPRESS_DEPRECATED_PUSH
        -: 1498:template <>
        -: 1499:struct _LIBCPP_TYPE_VIS __narrow_to_utf8<16>
        -: 1500:    : public codecvt<char16_t, char, mbstate_t>
        -: 1501:{
        -: 1502:    _LIBCPP_INLINE_VISIBILITY
        -: 1503:    __narrow_to_utf8() : codecvt<char16_t, char, mbstate_t>(1) {}
        -: 1504:_LIBCPP_SUPPRESS_DEPRECATED_POP
        -: 1505:
        -: 1506:    ~__narrow_to_utf8();
        -: 1507:
        -: 1508:    template <class _OutputIterator, class _CharT>
        -: 1509:    _LIBCPP_INLINE_VISIBILITY
        -: 1510:    _OutputIterator
        -: 1511:    operator()(_OutputIterator __s, const _CharT* __wb, const _CharT* __we) const
        -: 1512:    {
        -: 1513:        result __r = ok;
        -: 1514:        mbstate_t __mb;
        -: 1515:        while (__wb < __we && __r != error)
        -: 1516:        {
        -: 1517:            const int __sz = 32;
        -: 1518:            char __buf[__sz];
        -: 1519:            char* __bn;
        -: 1520:            const char16_t* __wn = (const char16_t*)__wb;
        -: 1521:            __r = do_out(__mb, (const char16_t*)__wb, (const char16_t*)__we, __wn,
        -: 1522:                         __buf, __buf+__sz, __bn);
        -: 1523:            if (__r == codecvt_base::error || __wn == (const char16_t*)__wb)
        -: 1524:                __throw_runtime_error("locale not supported");
        -: 1525:            for (const char* __p = __buf; __p < __bn; ++__p, ++__s)
        -: 1526:                *__s = *__p;
        -: 1527:            __wb = (const _CharT*)__wn;
        -: 1528:        }
        -: 1529:        return __s;
        -: 1530:    }
        -: 1531:};
        -: 1532:
        -: 1533:_LIBCPP_SUPPRESS_DEPRECATED_PUSH
        -: 1534:template <>
        -: 1535:struct _LIBCPP_TYPE_VIS __narrow_to_utf8<32>
        -: 1536:    : public codecvt<char32_t, char, mbstate_t>
        -: 1537:{
        -: 1538:    _LIBCPP_INLINE_VISIBILITY
        -: 1539:    __narrow_to_utf8() : codecvt<char32_t, char, mbstate_t>(1) {}
        -: 1540:_LIBCPP_SUPPRESS_DEPRECATED_POP
        -: 1541:
        -: 1542:    ~__narrow_to_utf8();
        -: 1543:
        -: 1544:    template <class _OutputIterator, class _CharT>
        -: 1545:    _LIBCPP_INLINE_VISIBILITY
        -: 1546:    _OutputIterator
        -: 1547:    operator()(_OutputIterator __s, const _CharT* __wb, const _CharT* __we) const
        -: 1548:    {
        -: 1549:        result __r = ok;
        -: 1550:        mbstate_t __mb;
        -: 1551:        while (__wb < __we && __r != error)
        -: 1552:        {
        -: 1553:            const int __sz = 32;
        -: 1554:            char __buf[__sz];
        -: 1555:            char* __bn;
        -: 1556:            const char32_t* __wn = (const char32_t*)__wb;
        -: 1557:            __r = do_out(__mb, (const char32_t*)__wb, (const char32_t*)__we, __wn,
        -: 1558:                         __buf, __buf+__sz, __bn);
        -: 1559:            if (__r == codecvt_base::error || __wn == (const char32_t*)__wb)
        -: 1560:                __throw_runtime_error("locale not supported");
        -: 1561:            for (const char* __p = __buf; __p < __bn; ++__p, ++__s)
        -: 1562:                *__s = *__p;
        -: 1563:            __wb = (const _CharT*)__wn;
        -: 1564:        }
        -: 1565:        return __s;
        -: 1566:    }
        -: 1567:};
        -: 1568:
        -: 1569:template <size_t _Np>
        -: 1570:struct __widen_from_utf8
        -: 1571:{
        -: 1572:    template <class _OutputIterator>
        -: 1573:    _OutputIterator
        -: 1574:    operator()(_OutputIterator __s, const char* __nb, const char* __ne) const;
        -: 1575:};
        -: 1576:
        -: 1577:template <>
        -: 1578:struct __widen_from_utf8<8>
        -: 1579:{
        -: 1580:    template <class _OutputIterator>
        -: 1581:    _LIBCPP_INLINE_VISIBILITY
        -: 1582:    _OutputIterator
        -: 1583:    operator()(_OutputIterator __s, const char* __nb, const char* __ne) const
        -: 1584:    {
        -: 1585:        for (; __nb < __ne; ++__nb, ++__s)
        -: 1586:            *__s = *__nb;
        -: 1587:        return __s;
        -: 1588:    }
        -: 1589:};
        -: 1590:
        -: 1591:_LIBCPP_SUPPRESS_DEPRECATED_PUSH
        -: 1592:template <>
        -: 1593:struct _LIBCPP_TYPE_VIS __widen_from_utf8<16>
        -: 1594:    : public codecvt<char16_t, char, mbstate_t>
        -: 1595:{
        -: 1596:    _LIBCPP_INLINE_VISIBILITY
        -: 1597:    __widen_from_utf8() : codecvt<char16_t, char, mbstate_t>(1) {}
        -: 1598:_LIBCPP_SUPPRESS_DEPRECATED_POP
        -: 1599:
        -: 1600:    ~__widen_from_utf8();
        -: 1601:
        -: 1602:    template <class _OutputIterator>
        -: 1603:    _LIBCPP_INLINE_VISIBILITY
        -: 1604:    _OutputIterator
        -: 1605:    operator()(_OutputIterator __s, const char* __nb, const char* __ne) const
        -: 1606:    {
        -: 1607:        result __r = ok;
        -: 1608:        mbstate_t __mb;
        -: 1609:        while (__nb < __ne && __r != error)
        -: 1610:        {
        -: 1611:            const int __sz = 32;
        -: 1612:            char16_t __buf[__sz];
        -: 1613:            char16_t* __bn;
        -: 1614:            const char* __nn = __nb;
        -: 1615:            __r = do_in(__mb, __nb, __ne - __nb > __sz ? __nb+__sz : __ne, __nn,
        -: 1616:                        __buf, __buf+__sz, __bn);
        -: 1617:            if (__r == codecvt_base::error || __nn == __nb)
        -: 1618:                __throw_runtime_error("locale not supported");
        -: 1619:            for (const char16_t* __p = __buf; __p < __bn; ++__p, ++__s)
        -: 1620:                *__s = *__p;
        -: 1621:            __nb = __nn;
        -: 1622:        }
        -: 1623:        return __s;
        -: 1624:    }
        -: 1625:};
        -: 1626:
        -: 1627:_LIBCPP_SUPPRESS_DEPRECATED_PUSH
        -: 1628:template <>
        -: 1629:struct _LIBCPP_TYPE_VIS __widen_from_utf8<32>
        -: 1630:    : public codecvt<char32_t, char, mbstate_t>
        -: 1631:{
        -: 1632:    _LIBCPP_INLINE_VISIBILITY
        -: 1633:    __widen_from_utf8() : codecvt<char32_t, char, mbstate_t>(1) {}
        -: 1634:_LIBCPP_SUPPRESS_DEPRECATED_POP
        -: 1635:
        -: 1636:    ~__widen_from_utf8();
        -: 1637:
        -: 1638:    template <class _OutputIterator>
        -: 1639:    _LIBCPP_INLINE_VISIBILITY
        -: 1640:    _OutputIterator
        -: 1641:    operator()(_OutputIterator __s, const char* __nb, const char* __ne) const
        -: 1642:    {
        -: 1643:        result __r = ok;
        -: 1644:        mbstate_t __mb;
        -: 1645:        while (__nb < __ne && __r != error)
        -: 1646:        {
        -: 1647:            const int __sz = 32;
        -: 1648:            char32_t __buf[__sz];
        -: 1649:            char32_t* __bn;
        -: 1650:            const char* __nn = __nb;
        -: 1651:            __r = do_in(__mb, __nb, __ne - __nb > __sz ? __nb+__sz : __ne, __nn,
        -: 1652:                        __buf, __buf+__sz, __bn);
        -: 1653:            if (__r == codecvt_base::error || __nn == __nb)
        -: 1654:                __throw_runtime_error("locale not supported");
        -: 1655:            for (const char32_t* __p = __buf; __p < __bn; ++__p, ++__s)
        -: 1656:                *__s = *__p;
        -: 1657:            __nb = __nn;
        -: 1658:        }
        -: 1659:        return __s;
        -: 1660:    }
        -: 1661:};
        -: 1662:
        -: 1663:// template <class charT> class numpunct
        -: 1664:
        -: 1665:template <class _CharT> class _LIBCPP_TEMPLATE_VIS numpunct;
        -: 1666:
        -: 1667:template <>
        -: 1668:class _LIBCPP_TYPE_VIS numpunct<char>
        -: 1669:    : public locale::facet
        -: 1670:{
        -: 1671:public:
        -: 1672:    typedef char char_type;
        -: 1673:    typedef basic_string<char_type> string_type;
        -: 1674:
        -: 1675:    explicit numpunct(size_t __refs = 0);
        -: 1676:
        -: 1677:    _LIBCPP_INLINE_VISIBILITY char_type decimal_point() const {return do_decimal_point();}
        -: 1678:    _LIBCPP_INLINE_VISIBILITY char_type thousands_sep() const {return do_thousands_sep();}
        -: 1679:    _LIBCPP_INLINE_VISIBILITY string grouping() const         {return do_grouping();}
        -: 1680:    _LIBCPP_INLINE_VISIBILITY string_type truename() const    {return do_truename();}
        -: 1681:    _LIBCPP_INLINE_VISIBILITY string_type falsename() const   {return do_falsename();}
        -: 1682:
        -: 1683:    static locale::id id;
        -: 1684:
        -: 1685:protected:
        -: 1686:    ~numpunct();
        -: 1687:    virtual char_type do_decimal_point() const;
        -: 1688:    virtual char_type do_thousands_sep() const;
        -: 1689:    virtual string do_grouping() const;
        -: 1690:    virtual string_type do_truename() const;
        -: 1691:    virtual string_type do_falsename() const;
        -: 1692:
        -: 1693:    char_type __decimal_point_;
        -: 1694:    char_type __thousands_sep_;
        -: 1695:    string __grouping_;
        -: 1696:};
        -: 1697:
        -: 1698:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 1699:template <>
        -: 1700:class _LIBCPP_TYPE_VIS numpunct<wchar_t>
        -: 1701:    : public locale::facet
        -: 1702:{
        -: 1703:public:
        -: 1704:    typedef wchar_t char_type;
        -: 1705:    typedef basic_string<char_type> string_type;
        -: 1706:
        -: 1707:    explicit numpunct(size_t __refs = 0);
        -: 1708:
        -: 1709:    _LIBCPP_INLINE_VISIBILITY char_type decimal_point() const {return do_decimal_point();}
        -: 1710:    _LIBCPP_INLINE_VISIBILITY char_type thousands_sep() const {return do_thousands_sep();}
        -: 1711:    _LIBCPP_INLINE_VISIBILITY string grouping() const         {return do_grouping();}
        -: 1712:    _LIBCPP_INLINE_VISIBILITY string_type truename() const    {return do_truename();}
        -: 1713:    _LIBCPP_INLINE_VISIBILITY string_type falsename() const   {return do_falsename();}
        -: 1714:
        -: 1715:    static locale::id id;
        -: 1716:
        -: 1717:protected:
        -: 1718:    ~numpunct();
        -: 1719:    virtual char_type do_decimal_point() const;
        -: 1720:    virtual char_type do_thousands_sep() const;
        -: 1721:    virtual string do_grouping() const;
        -: 1722:    virtual string_type do_truename() const;
        -: 1723:    virtual string_type do_falsename() const;
        -: 1724:
        -: 1725:    char_type __decimal_point_;
        -: 1726:    char_type __thousands_sep_;
        -: 1727:    string __grouping_;
        -: 1728:};
        -: 1729:#endif // _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 1730:
        -: 1731:// template <class charT> class numpunct_byname
        -: 1732:
        -: 1733:template <class _CharT> class _LIBCPP_TEMPLATE_VIS numpunct_byname;
        -: 1734:
        -: 1735:template <>
        -: 1736:class _LIBCPP_TYPE_VIS numpunct_byname<char>
        -: 1737:: public numpunct<char>
        -: 1738:{
        -: 1739:public:
        -: 1740:    typedef char char_type;
        -: 1741:    typedef basic_string<char_type> string_type;
        -: 1742:
        -: 1743:    explicit numpunct_byname(const char* __nm, size_t __refs = 0);
        -: 1744:    explicit numpunct_byname(const string& __nm, size_t __refs = 0);
        -: 1745:
        -: 1746:protected:
        -: 1747:    ~numpunct_byname();
        -: 1748:
        -: 1749:private:
        -: 1750:    void __init(const char*);
        -: 1751:};
        -: 1752:
        -: 1753:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 1754:template <>
        -: 1755:class _LIBCPP_TYPE_VIS numpunct_byname<wchar_t>
        -: 1756:: public numpunct<wchar_t>
        -: 1757:{
        -: 1758:public:
        -: 1759:    typedef wchar_t char_type;
        -: 1760:    typedef basic_string<char_type> string_type;
        -: 1761:
        -: 1762:    explicit numpunct_byname(const char* __nm, size_t __refs = 0);
        -: 1763:    explicit numpunct_byname(const string& __nm, size_t __refs = 0);
        -: 1764:
        -: 1765:protected:
        -: 1766:    ~numpunct_byname();
        -: 1767:
        -: 1768:private:
        -: 1769:    void __init(const char*);
        -: 1770:};
        -: 1771:#endif // _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 1772:
        -: 1773:_LIBCPP_END_NAMESPACE_STD
        -: 1774:
        -: 1775:#endif // _LIBCPP___LOCALE
